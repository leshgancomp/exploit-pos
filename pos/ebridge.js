var FFI = require('ffi');
var ref = require("ref");
//var xmlBuilder = require('xmlbuilder');
var Parser = require("fast-xml-parser");
var j2xParser = require("fast-xml-parser").j2xParser;



class eBridge {
    constructor(debug = false) {
        this.isDebug = debug;
        var pXMLDataOutPtr = ref.refType('string');
        this.eBridge = new FFI.Library('./eBridge/eBridge', {
            PerformCardOperation: ['void', ['string', pXMLDataOutPtr]]//,
            //PerformCardOperationCb: ['void', ['string', 'string','int']]
        });
    }

    sale(amount, currency) {
        var self = this;
        return new Promise(function (resolve, reject) {
            var PerformCardOperation = {
                PerformCardOperation: {
                    OperationDataRq: [
                        {OperationType: 'Sale'},
                        { Amount: amount },
                        { Currency: currency }
                    ]
                }
            };
            var parser = new j2xParser();
            var xml = parser.parse(PerformCardOperation);
            self.debug(xml);
            self.PerformCardOperation(xml).then(function(data){
                resolve(data);
            }).catch(function(error){
                reject(error);
            });
        });
    }
    
    PerformCardOperation(pXMLDataIn){
        var self = this;
        return new Promise(function (resolve, reject) {
            var pXMLDataOut = ref.alloc('string');
            try {
                self.eBridge.PerformCardOperation(pXMLDataIn,pXMLDataOut);
                if(Parser.validate(pXMLDataOut.deref()) === true) {
                    var jsonObj = Parser.parse(pXMLDataOut.deref());
                    self.debug('POS answer',jsonObj);
                    resolve({
                        result: (jsonObj.OperationResultRs.ResultCode == 0? true : false),
                        text: jsonObj.OperationResultRs.ChequeText,
                        terminalResultRaw: jsonObj
                    });
                }else{
                    self.debug('POS answer XML validation error',pXMLDataOut.deref());
                    reject('POS answer XML validation error',pXMLDataOut.deref());
                }
            }catch (error){
                reject(error);
            }
        });
    }

    debug(...params) {
        if (this.isDebug) {
            console.log(params);
        }
    }
}
module.exports = eBridge;
